self = "192.168.126.73"
master = "192.168.126.73"
hiveserver = "192.168.126.45"
# //#cluster
akka {
	# Options: ERROR, WARNING, INFO, DEBUG
  	loglevel = DEBUG
  
  	# Event handlers to register at boot time (Logging$DefaultLogger logs to STDOUT)
  	event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  
  	# Log the complete configuration at INFO level when the actor system is started.
	# This is useful when you are uncertain of what configuration is used.
	log-config-on-start = on
  	actor {
    	provider = "akka.cluster.ClusterActorRefProvider"
    	debug {
			# enable function of LoggingReceive, which is to log any received message at
			# DEBUG level
			receive = on
			
			# enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like)
			# autoreceive = on
			
			# enable DEBUG logging of actor lifecycle changes
			# lifecycle = on
		}
  	}
  	remote {
    	transport = "akka.remote.netty.NettyRemoteTransport"
    	log-remote-lifecycle-events = off
    	netty {
     		hostname = ${self}
        	port = 0
        	message-frame-size = 8 MiB   
		}
  	}

  	cluster {
    	seed-nodes = [
     		"akka://ClusterSystem@"${master}":2551"]
		seed-node-timeout = 35s
		retry-unsuccessful-join-after = 10s
    	auto-down = off
    	failure-detector {
    		threshold = 18.0
    		acceptable-heartbeat-pause = 30 s
    	}
  	}
}
# //#cluster
# camel http server
camel {
    host = "0.0.0.0"
    port = "4444"
}
hbase {
	write_buffer_size = 8388608
}
bulu {
	actors_for_worker = 4
}
hive1g {
	init_at_first = false
	record_threshold = 64
	cell_threshold = 1000
	clear_cuboid_after_save = true
	driver = "org.apache.hadoop.hive.jdbc.HiveDriver"
	url= "jdbc:hive://"${hiveserver}":10000/default" 
	
	queryPartition = "i_item_id"
	fetchSize = 10000
	statement = """
			select p_channel_email,p_channel_event,cd_gender,cd_marital_status,cd_education_status,
				i_item_id, i_category,i_manager_id, i_brand, d_year,d_moy, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price, ss_ext_sales_price 
			from  store_sales join customer_demographics on (store_sales.ss_cdemo_sk = customer_demographics.cd_demo_sk) 
				join promotion on (store_sales.ss_promo_sk = promotion.p_promo_sk)
				join date_dim on (store_sales.ss_sold_date_sk = date_dim.d_date_sk) 
				join item on (store_sales.ss_item_sk = item.i_item_sk) 
		"""
	metadata {
		fields = ["p_channel_email","p_channel_event","cd_gender","cd_marital_status","cd_education_status",
				"i_item_id","i_category","i_manager_id", "i_brand", "d_year","d_moy", "ss_quantity", "ss_list_price", "ss_coupon_amt", "ss_sales_price","ss_ext_sales_price"]
		tables = ["promotion","promotion","customer_demographics","customer_demographics","customer_demographics",
				"item","item","item","item","date_dim","date_dim","store_sales","store_sales","store_sales","store_sales","store_sales"]
		dataTypes = ["String","String","String","String","String",
					"String","String","String","String","String","String","Double","Double","Double","Double","Double"]
		dimensions = ["True","True","True","True","True"
					"True","True","True","True","True","True","False","False","False","False","False"]
		measures = ["False","False","False","False","False",
					"False","False","False","False","False","False","True","True","True","True","True"]
	}
}
hive10g {
	init_at_first = false
	record_threshold = 1000
	cell_threshold = 10000
	clear_cuboid_after_save = true
	driver = "org.apache.hadoop.hive.jdbc.HiveDriver"
	url= "jdbc:hive://"${hiveserver}":10000/default"
	partition = "cd_education_status"
	queryPartition = "i_item_id"
	fetchSize = 10000
	statement = """
			select p_channel_email,p_channel_event,cd_gender,cd_marital_status,cd_education_status,
				i_item_id, i_category,i_manager_id, i_brand, d_year,d_moy, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price, ss_ext_sales_price 
			from  store_sales_10 join customer_demographics_10 on (store_sales_10.ss_cdemo_sk = customer_demographics_10.cd_demo_sk) 
				join promotion_10 on (store_sales_10.ss_promo_sk = promotion_10.p_promo_sk)
				join date_dim_10 on (store_sales_10.ss_sold_date_sk = date_dim_10.d_date_sk) 
				join item_10 on (store_sales_10.ss_item_sk = item_10.i_item_sk) 
		"""
	metadata {
		fields = ["p_channel_email","p_channel_event","cd_gender","cd_marital_status","cd_education_status",
				"i_item_id","i_category","i_manager_id", "i_brand", "d_year","d_moy", "ss_quantity", "ss_list_price", "ss_coupon_amt", "ss_sales_price","ss_ext_sales_price"]
		tables = ["promotion_10","promotion_10","customer_demographics_10","customer_demographics_10","customer_demographics_10",
				"item_10","item_10","item_10","item_10","date_dim_10","date_dim_10","store_sales_10","store_sales_10","store_sales_10","store_sales_10","store_sales_10"]
		dataTypes = ["String","String","String","String","String",
					"String","String","String","String","String","String","Double","Double","Double","Double","Double"]
		dimensions = ["True","True","True","True","True"
					"True","True","True","True","True","True","False","False","False","False","False"]
		measures = ["False","False","False","False","False",
					"False","False","False","False","False","False","True","True","True","True","True"]
	}
}
hive100g {
	init_at_first = false
	record_threshold = 1000
	cell_threshold = 10000
	clear_cuboid_after_save = true
	driver = "org.apache.hadoop.hive.jdbc.HiveDriver"
	url= "jdbc:hive://"${hiveserver}":10000/default" 
	partition = "cd_education_status"
	queryPartition = "i_item_id"
	fetchSize = 10000
	statement = """
			select p_channel_email,p_channel_event,cd_gender,cd_marital_status,cd_education_status,
				i_item_id, i_category,i_manager_id, i_brand, d_year,d_moy, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price, ss_ext_sales_price  
			from  store_sales_100 join customer_demographics_100 on (store_sales_100.ss_cdemo_sk = customer_demographics_100.cd_demo_sk) 
				join promotion_100 on (store_sales_100.ss_promo_sk = promotion_100.p_promo_sk)
				join date_dim_100 on (store_sales_100.ss_sold_date_sk = date_dim_100.d_date_sk) 
				join item_100 on (store_sales_100.ss_item_sk = item_100.i_item_sk) 
		"""
	metadata {
		fields = ["p_channel_email","p_channel_event","cd_gender","cd_marital_status","cd_education_status",
				"i_item_id","i_category","i_manager_id", "i_brand", "d_year","d_moy", "ss_quantity", "ss_list_price", "ss_coupon_amt", "ss_sales_price","ss_ext_sales_price"]
		tables = ["promotion_100","promotion_100","customer_demographics_100","customer_demographics_100","customer_demographics_100",
				"item_100","item_100","item_100","item_100","date_dim_100","date_dim_100","store_sales_100","store_sales_100","store_sales_100","store_sales_100","store_sales_100"]
		dataTypes = ["String","String","String","String","String",
					"String","String","String","String","String","String","Double","Double","Double","Double","Double"]
		dimensions = ["True","True","True","True","True"
					"True","True","True","True","True","True","False","False","False","False","False"]
		measures = ["False","False","False","False","False",
					"False","False","False","False","False","False","True","True","True","True","True"]
	}
}
query7 {
	cube="hive1g"
	write_to_disk = true
	row = ["i_item_id"]
	column = []
	cell {
		field=["ss_quantity", "ss_list_price", "ss_coupon_amt", "ss_sales_price"]
		aggType=["avg","avg","avg","avg"]
	}
	where {
		count = 2
		filter1 {
			count=5
			condition1 = ["=", "cd_gender", "[GEN]"]
			condition2 = ["=", "cd_marital_status", "[MS]"]
			condition3 = ["=", "cd_education_status", "[ES]"]
			condition4 = ["=", "p_channel_email", "N"]
			condition5 = ["=", "d_year", "[YEAR]"]
		}
		filter2 {
			count=5
			condition1 = ["=", "cd_gender", "[GEN]"]
			condition2 = ["=", "cd_marital_status", "[MS]"]
			condition3 = ["=", "cd_education_status", "[ES]"]
			condition4 = ["=", "p_channel_event", "N"]
			condition5 = ["=", "d_year", "[YEAR]"]
		}
		
	}
	usedCuboid=["p_channel_email","p_channel_event","cd_gender","cd_marital_status","cd_education_status","i_item_id","d_year"]		
	order=["i_item_id"]			
}

query42{
	cube="hive1g"
	write_to_disk = true
	row = ["d_year","i_category"]
	column = []
	cell {
		field=[ "ss_ext_sales_price"]
		aggType=["sum"]
	}
	where {
		count = 1
		filter1 {
			count=2
			condition1 = ["=", "d_year", "[YEAR]"]
			condition2 = ["=", "d_moy", "[MONTH]"]
		}
		
	}
	usedCuboid=["d_year","d_moy", "i_category"]
	order=[]		
}

query52{
	cube="hive1g"
	write_to_disk = true
	row = ["d_year","i_brand"]
	column = []
	cell {
		field=[ "ss_ext_sales_price"]
		aggType=["sum"]
	}
	where {
		count = 1
		filter1 {
			count=2
			condition1 = ["=", "d_year", "[YEAR]"]
			condition2 = ["=", "d_moy", "[MONTH]"]
		}
		
	}
	usedCuboid=["d_year","d_moy", "i_brand"]
	order=[]		
}

query55{
	cube="hive1g"
	write_to_disk = true
	row = ["d_year","i_brand"]
	column = []
	cell {
		field=[ "ss_ext_sales_price"]
		aggType=["sum"]
	}
	where {
		count = 1
		filter1 {
			count=3
			condition1 = ["=", "d_year", "[YEAR]"]
			condition2 = ["=", "d_moy", "[MONTH]"]
			condition3 = ["=", "i_manager_id", "[MANAGER]"]
		}
		
	}
	usedCuboid=["d_year","d_moy", "i_brand","i_manager_id"]
	order=[]		
}
query710 {
	cube="hive10g"
	write_to_disk = true
	row = ["i_item_id"]
	column = []
	cell {
		field=["ss_quantity", "ss_list_price", "ss_coupon_amt", "ss_sales_price"]
		aggType=["avg","avg","avg","avg"]
	}
	where {
		count = 2
		filter1 {
			count=5
			condition1 = ["=", "cd_gender", "[GEN]"]
			condition2 = ["=", "cd_marital_status", "[MS]"]
			condition3 = ["=", "cd_education_status", "[ES]"]
			condition4 = ["=", "p_channel_email", "N"]
			condition5 = ["=", "d_year", "[YEAR]"]
		}
		filter2 {
			count=5
			condition1 = ["=", "cd_gender", "[GEN]"]
			condition2 = ["=", "cd_marital_status", "[MS]"]
			condition3 = ["=", "cd_education_status", "[ES]"]
			condition4 = ["=", "p_channel_event", "N"]
			condition5 = ["=", "d_year", "[YEAR]"]
		}
		
	}
	usedCuboid=["p_channel_email","p_channel_event","cd_gender","cd_marital_status","cd_education_status","i_item_id","d_year"]					
}
query4210 {
	cube="hive1g"
	write_to_disk = true
	row = ["d_year","i_category"]
	column = []
	cell {
		field=[ "ss_ext_sales_price"]
		aggType=["sum"]
	}
	where {
		count = 1
		filter1 {
			count=2
			condition1 = ["=", "d_year", "[YEAR]"]
			condition2 = ["=", "d_moy", "[MONTH]"]
		}
		
	}
	usedCuboid=["d_year","d_moy", "i_category"]
	order=[]		
}

query5210 {
	cube="hive1g"
	write_to_disk = true
	row = ["d_year","i_brand"]
	column = []
	cell {
		field=[ "ss_ext_sales_price"]
		aggType=["sum"]
	}
	where {
		count = 1
		filter1 {
			count=2
			condition1 = ["=", "d_year", "[YEAR]"]
			condition2 = ["=", "d_moy", "[MONTH]"]
		}
		
	}
	usedCuboid=["d_year","d_moy", "i_brand"]
	order=[]		
}

query5510{
	cube="hive1g"
	write_to_disk = true
	row = ["d_year","i_brand"]
	column = []
	cell {
		field=[ "ss_ext_sales_price"]
		aggType=["sum"]
	}
	where {
		count = 1
		filter1 {
			count=3
			condition1 = ["=", "d_year", "[YEAR]"]
			condition2 = ["=", "d_moy", "[MONTH]"]
			condition3 = ["=", "i_manager_id", "[MANAGER]"]
		}
		
	}
	usedCuboid=["d_year","d_moy", "i_brand","i_manager_id"]
	order=[]		
}
query7100 {
	cube="hive100g"
	write_to_disk = true
	row = ["i_item_id"]
	column = []
	cell {
		field=["ss_quantity", "ss_list_price", "ss_coupon_amt", "ss_sales_price"]
		aggType=["avg","avg","avg","avg"]
	}
	where {
		count = 2
		filter1 {
			count=5
			condition1 = ["=", "cd_gender", "[GEN]"]
			condition2 = ["=", "cd_marital_status", "[MS]"]
			condition3 = ["=", "cd_education_status", "[ES]"]
			condition4 = ["=", "p_channel_email", "N"]
			condition5 = ["=", "d_year", "[YEAR]"]
		}
		filter2 {
			count=5
			condition1 = ["=", "cd_gender", "[GEN]"]
			condition2 = ["=", "cd_marital_status", "[MS]"]
			condition3 = ["=", "cd_education_status", "[ES]"]
			condition4 = ["=", "p_channel_event", "N"]
			condition5 = ["=", "d_year", "[YEAR]"]
		}
		
	}
	usedCuboid=["p_channel_email","p_channel_event","cd_gender","cd_marital_status","cd_education_status","i_item_id","d_year"]					
}
query42100 {
	cube="hive1g"
	write_to_disk = true
	row = ["d_year","i_category"]
	column = []
	cell {
		field=[ "ss_ext_sales_price"]
		aggType=["sum"]
	}
	where {
		count = 1
		filter1 {
			count=2
			condition1 = ["=", "d_year", "[YEAR]"]
			condition2 = ["=", "d_moy", "[MONTH]"]
		}
		
	}
	usedCuboid=["d_year","d_moy", "i_category"]
	order=[]		
}

query52100 {
	cube="hive1g"
	write_to_disk = true
	row = ["d_year","i_brand"]
	column = []
	cell {
		field=[ "ss_ext_sales_price"]
		aggType=["sum"]
	}
	where {
		count = 1
		filter1 {
			count=2
			condition1 = ["=", "d_year", "[YEAR]"]
			condition2 = ["=", "d_moy", "[MONTH]"]
		}
		
	}
	usedCuboid=["d_year","d_moy", "i_brand"]
	order=[]		
}

query55100 {
	cube="hive1g"
	write_to_disk = true
	row = ["d_year","i_brand"]
	column = []
	cell {
		field=[ "ss_ext_sales_price"]
		aggType=["sum"]
	}
	where {
		count = 1
		filter1 {
			count=3
			condition1 = ["=", "d_year", "[YEAR]"]
			condition2 = ["=", "d_moy", "[MONTH]"]
			condition3 = ["=", "i_manager_id", "[MANAGER]"]
		}
		
	}
	usedCuboid=["d_year","d_moy", "i_brand","i_manager_id"]
	order=[]		
}
testCube {
	init_at_first = false
	
	record_threshold = 64
	cell_threshold = 1000
	driver = "org.apache.hadoop.hive.jdbc.HiveDriver"
	url= "jdbc:hive://"${hiveserver}":10000/default"
	partition = "cc_class"
	queryPartition = "cc_division_name"
	fetchSize = 10000
	statement = """
			select cc_division_name,cc_class, cc_employees,cc_sq_ft from  call_center 
		"""
	metadata {
		fields = ["cc_division_name","cc_class","cc_employees","cc_sq_ft"]
		tables = ["call_center","call_center","call_center","call_center"]
		dataTypes = ["String","String","Int","Int"]
		dimensions = ["True","True","False","False",]
		measures = ["False","False","True","True"]
	}
}
testQuery {
	cube="testCube"
	write_to_disk = false
	row = ["cc_division_name","cc_class"]
	column = []
	cell {
		field=["cc_employees", "cc_employees", "cc_employees", "cc_sq_ft","cc_sq_ft","cc_sq_ft"]
		aggType=["sum","cnt","avg","sum","cnt","avg"]
	}
	where {
		count = 1
		filter1 {
			count=1
			condition1 = ["=", "cc_class", "[CLASS]"]
		}
	}
	usedCuboid=["cc_division_name","cc_class"]
	order=["cc_division_name"]					
}
testHighQuery {
	cube="testCube"
	write_to_disk = false
	row = ["cc_class"]
	column = []
	cell {
		field=[ "cc_employees", "cc_sq_ft"]
		aggType=["avg","avg"]
	}
	where {
		count = 1
		filter1 {
			count=1
			condition1 = ["=", "cc_class", "[CLASS]"]
		}
		
	}
	usedCuboid=["cc_class"]
	order=["cc_class"]					
}
# //#adaptive-router
akka.actor.deployment {
  /factorialFrontend/factorialBackendRouter = {
    router = adaptive
    # metrics-selector = heap
    # metrics-selector = load
    # metrics-selector = cpu
    metrics-selector = mix
    nr-of-instances = 100
    cluster {
      enabled = on
      routees-path = "/user/factorialBackend"
      allow-local-routees = off
    }
  }
}
# //#adaptive-router